export class ZuluDateHelper {
    static getZuluDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        return new Date(Date.UTC(inputDate.getUTCFullYear(), inputDate.getUTCMonth(), inputDate.getUTCDate(), inputDate.getUTCHours(), inputDate.getUTCMinutes(), inputDate.getUTCSeconds()));
    }
    static getGMTDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        const _userOffset = inputDate.getTimezoneOffset() * 60 * 1000;
        return new Date(inputDate.getTime() + _userOffset);
    }
    static setGMTDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        const _userOffset = inputDate.getTimezoneOffset() * 60 * 1000;
        return new Date(inputDate.getTime() - _userOffset);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoienVsdURhdGUuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25nc2NhZmZvbGRpbmcvbW9kZWxzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvenVsdURhdGUuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxjQUFjO0lBQ2hCLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBZTtRQUNyQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sSUFBSSxJQUFJLENBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FDSixTQUFTLENBQUMsY0FBYyxFQUFFLEVBQzFCLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFDdkIsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUN0QixTQUFTLENBQUMsV0FBVyxFQUFFLEVBQ3ZCLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFDekIsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUM1QixDQUNKLENBQUM7SUFDTixDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFlO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUM5RCxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFlO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUM5RCxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgWnVsdURhdGVIZWxwZXIge1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRadWx1RGF0ZShpbnB1dERhdGU6IERhdGUpOiBEYXRlIHtcclxuICAgICAgICBpZiAoIWlucHV0RGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxyXG4gICAgICAgICAgICBEYXRlLlVUQyhcclxuICAgICAgICAgICAgICAgIGlucHV0RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxyXG4gICAgICAgICAgICAgICAgaW5wdXREYXRlLmdldFVUQ01vbnRoKCksXHJcbiAgICAgICAgICAgICAgICBpbnB1dERhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgaW5wdXREYXRlLmdldFVUQ0hvdXJzKCksXHJcbiAgICAgICAgICAgICAgICBpbnB1dERhdGUuZ2V0VVRDTWludXRlcygpLFxyXG4gICAgICAgICAgICAgICAgaW5wdXREYXRlLmdldFVUQ1NlY29uZHMoKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEdNVERhdGUoaW5wdXREYXRlOiBEYXRlKTogRGF0ZSB7XHJcbiAgICAgICAgaWYgKCFpbnB1dERhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IF91c2VyT2Zmc2V0ID0gaW5wdXREYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlucHV0RGF0ZS5nZXRUaW1lKCkgKyBfdXNlck9mZnNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRHTVREYXRlKGlucHV0RGF0ZTogRGF0ZSk6IERhdGUge1xyXG4gICAgICAgIGlmICghaW5wdXREYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBfdXNlck9mZnNldCA9IGlucHV0RGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShpbnB1dERhdGUuZ2V0VGltZSgpIC0gX3VzZXJPZmZzZXQpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==