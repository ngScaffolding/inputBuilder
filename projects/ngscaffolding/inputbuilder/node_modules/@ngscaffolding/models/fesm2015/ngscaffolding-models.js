import { ɵɵdefineNgModule, ɵɵdefineInjector, ɵsetClassMetadata, NgModule } from '@angular/core';

class SetPasswordModel {
}

class BasicUser {
    constructor() {
        this.role = [];
    }
}
function createBasicUser() {
    return {
        userId: null,
        email: null,
        name: null,
        firstName: null,
        lastName: null,
        role: []
    };
}

class AuthUserResponse {
}

class BaseEntity {
}

class Role extends BaseEntity {
}

class Action extends BaseEntity {
}
class DialogOptions {
}

class ActionRequestModel {
}
class ActionResultModel {
}

class AppSettingsValue extends BaseEntity {
}
var AppSettings;
(function (AppSettings) {
    AppSettings["title"] = "title";
    AppSettings["mobiletitle"] = "mobileTitle";
    AppSettings["iconUrl"] = "iconUrl";
    // Error Handling
    AppSettings["errorShowUser"] = "errorShowUser";
    AppSettings["errorLogConsole"] = "errorLogConsole";
    AppSettings["errorLogServer"] = "errorLogServer";
    AppSettings["pageNotFoundText"] = "pageNotFoundText";
    // Auth Settings
    AppSettings["authSaveinLocalStorage"] = "authSaveinLocalStorage";
    AppSettings["authShowRememberMe"] = "authShowRememberMe";
    AppSettings["authShowForgotPassword"] = "authShowForgotPassword";
    AppSettings["authShowRegister"] = "authShowRegister";
    AppSettings["authTermsAndConditions"] = "authTermsAndConditions";
    AppSettings["authClientId"] = "authClientId";
    AppSettings["authClientSecret"] = "authClientSecret";
    AppSettings["authScope"] = "authScope";
    AppSettings["authUserIdIsEmail"] = "authUserIdIsEmail";
    AppSettings["authUserUniqueField"] = "authUserUniqueField";
    AppSettings["authTokenEndpoint"] = "authTokenEndpoint";
    AppSettings["authPasswordMinLength"] = "authPasswordMinLength";
    AppSettings["authPasswordUpperCase"] = "authPasswordUpperCase";
    AppSettings["authPasswordLowerCase"] = "authPasswordLowerCase";
    AppSettings["authPasswordNumeric"] = "authPasswordNumeric";
    AppSettings["authPasswordSpecial"] = "authPasswordSpecial";
    AppSettings["authRequiredRole"] = "authRequiredRole";
    // OAuth Settings block
    AppSettings["authOAuthSettings"] = "authOAuthSettings";
    // Screen Furniture
    AppSettings["showFooter"] = "showFooter";
    AppSettings["showTopNotifications"] = "showTopNotifications";
    AppSettings["showTopSearch"] = "showTopSearch";
    AppSettings["showTopProfile"] = "showTopProfile";
    AppSettings["showFullMessages"] = "showFullMessages";
    AppSettings["showToastMessages"] = "showToastMessages";
    AppSettings["showProfileSetting"] = "showProfileSetting";
    AppSettings["showProfilePicture"] = "showProfilePicture";
    AppSettings["showUserSetting"] = "showUserSetting";
    AppSettings["menuType"] = "menuType";
    AppSettings["compactMode"] = "compactMode";
    AppSettings["agGridTheme"] = "agGridTheme";
    // Input Builder
    AppSettings["inputShowCalendarIcon"] = "inputShowCalendarIcon";
    AppSettings["inputDateTimeFormat"] = "inputDateTimeFormat";
    AppSettings["inputDateFormat"] = "inputDateFormat";
    AppSettings["inputDateForceUTC"] = "inputDateForceUTC";
    AppSettings["inputDateShowButtonBar"] = "inputDateShowButtonBar";
    // File Uploads
    AppSettings["maximumFileSize"] = "maximumFileSize";
    AppSettings["allowedFileTypes"] = "allowedFileTypes";
    // moment Formats for dates
    AppSettings["dateTimeFormat"] = "dateTimeFormat";
    AppSettings["dateFormat"] = "dateFormat";
    // DataGrid Options
    AppSettings["dataGridIconToolBar"] = "dataGridIconToolBar";
    AppSettings["dataGridAllowConfigureColumns"] = "dataGridAllowConfigureColumns";
    AppSettings["dataGridAllowExport"] = "dataGridAllowExport";
    AppSettings["dataGridAllowSaveView"] = "dataGridAllowSaveView";
    AppSettings["dataGridAllowResetView"] = "dataGridAllowResetView";
    AppSettings["dataGridAllowShareView"] = "dataGridAllowShareView";
    AppSettings["dataGridUseEnterprise"] = "dataGridUseEnterprise";
    // Dashboard Settings
    AppSettings["dashboardDefaultConfig"] = "dashboardDefaultConfig";
    // User Preferences
    AppSettings["prefHideTheme"] = "prefHideTheme";
    AppSettings["apiHome"] = "apiHome";
    AppSettings["apiAuth"] = "apiAuth";
    AppSettings["apiServers"] = "apiServers";
    AppSettings["cacheDefaultSeconds"] = "cacheDefaultSeconds";
    // Mobile settings
    AppSettings["isMobile"] = "isMobile";
    AppSettings["mobileTitle"] = "mobileTitle";
    AppSettings["mobileCacheNames"] = "mobileCacheNames";
    AppSettings["mobileDefaultTimeout"] = "mobileDefaultTimeout";
    AppSettings["mobileDefaultRetries"] = "mobileDefaultRetries";
    AppSettings["mobileDefaultPolling"] = "mobileDefaultPolling";
})(AppSettings || (AppSettings = {}));

class CacheEntry {
}

class ZuluDateHelper {
    static getZuluDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        return new Date(Date.UTC(inputDate.getUTCFullYear(), inputDate.getUTCMonth(), inputDate.getUTCDate(), inputDate.getUTCHours(), inputDate.getUTCMinutes(), inputDate.getUTCSeconds()));
    }
    static getGMTDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        const _userOffset = inputDate.getTimezoneOffset() * 60 * 1000;
        return new Date(inputDate.getTime() + _userOffset);
    }
    static setGMTDate(inputDate) {
        if (!inputDate) {
            return null;
        }
        const _userOffset = inputDate.getTimezoneOffset() * 60 * 1000;
        return new Date(inputDate.getTime() - _userOffset);
    }
}

class ErrorModel {
    constructor(err) {
        this.message = err.message;
        this.dateRecorded = ZuluDateHelper.setGMTDate(new Date());
    }
}

class Message {
}

class ReferenceValue extends BaseEntity {
}
class ReferenceValueItem {
}
function createReferenceValue(params) {
    return {
        name: '',
        value: null
    };
}

var PreferenceTypes;
(function (PreferenceTypes) {
    PreferenceTypes["UserPrefs_Profile"] = "UserPrefs_Profile";
})(PreferenceTypes || (PreferenceTypes = {}));
class UserPreferenceDefinition extends BaseEntity {
}
class UserPreferenceValue extends BaseEntity {
}

class DataSourceRequest {
}

class ColumnModel extends BaseEntity {
}

class GridViewDetail {
}

class BaseDataSource {
}

class APILocation {
}

var ParameterTypes;
(function (ParameterTypes) {
    ParameterTypes["String"] = "string";
    ParameterTypes["Number"] = "number";
    ParameterTypes["Boolean"] = "boolean";
    ParameterTypes["Date"] = "date";
    ParameterTypes["Binary"] = "binary";
})(ParameterTypes || (ParameterTypes = {}));

class RestApiDataSource {
}

class SqlDataSource {
}

class DocumentDBDataSource {
}

class MongoDBDataSource extends BaseDataSource {
}

class MySqlDataSource {
}

class InputBuilderDefinition extends BaseEntity {
}

class BaseInput {
}
var InputTypes;
(function (InputTypes) {
    InputTypes["null"] = "null";
    InputTypes["textbox"] = "textbox";
    InputTypes["number"] = "number";
    InputTypes["email"] = "email";
    InputTypes["password"] = "password";
    InputTypes["textarea"] = "textarea";
    InputTypes["datetime"] = "datetime";
    InputTypes["date"] = "date";
    InputTypes["time"] = "time";
    InputTypes["select"] = "select";
    InputTypes["switch"] = "switch";
    InputTypes["editor"] = "editor";
    InputTypes["listbox"] = "listbox";
    InputTypes["colourpicker"] = "colourpicker";
    InputTypes["spinner"] = "spinner";
    InputTypes["slider"] = "slider";
    InputTypes["checkbox"] = "checkbox";
    InputTypes["tricheckbox"] = "tricheckbox";
    InputTypes["tree"] = "tree";
    InputTypes["selectbutton"] = "selectbutton";
    InputTypes["togglebutton"] = "togglebutton";
    InputTypes["radio"] = "radio";
    InputTypes["radiobuttons"] = "radiobuttons";
    InputTypes["dropdown"] = "dropdown";
    InputTypes["rating"] = "rating";
    InputTypes["autocomplete"] = "autocomplete";
    InputTypes["multiselect"] = "multiselect";
    InputTypes["chips"] = "chips";
    InputTypes["keyfilter"] = "keyfilter";
    InputTypes["fileattach"] = "fileattach";
    InputTypes["dynamic"] = "dynamic";
    InputTypes["search"] = "search";
    InputTypes["repeatform"] = "repeatform";
})(InputTypes || (InputTypes = {}));
class InputDetail extends BaseEntity {
}
class InputDetailFile extends InputDetail {
}
class InputDetailTextBox extends InputDetail {
}
class InputDetailDateTime extends InputDetail {
}
class InputDetailReferenceValues extends InputDetail {
}
class InputDetailDropdown extends InputDetailReferenceValues {
}
class InputDetailToggleButton extends InputDetail {
}
class InputDetailTextArea extends InputDetail {
}
class InputDetailSlider extends InputDetail {
}
class InputAutoCompete extends InputDetailReferenceValues {
}
class FileAttach extends InputDetail {
}
class InputDynamic extends InputDetail {
}

class NotifcationDetails {
}

class NotificationSentMessage {
}

class NotifcationSubscriber {
}

class DeepCloneHelper {
    static getDeepCopy(obj) {
        let copy;
        // Handle the 3 simple types, and null or undefined
        // tslint:disable-next-line: triple-equals
        if (null == obj || 'object' != typeof obj) {
            return obj;
        }
        // Handle Date
        if (obj instanceof Date) {
            copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        // Handle Array
        if (obj instanceof Array) {
            copy = [];
            for (let i = 0, len = obj.length; i < len; i++) {
                copy[i] = DeepCloneHelper.getDeepCopy(obj[i]);
            }
            return copy;
        }
        // Handle Object
        if (obj instanceof Object) {
            copy = {};
            for (let attr in obj) {
                if (attr !== 'component' && obj.hasOwnProperty(attr)) {
                    copy[attr] = DeepCloneHelper.getDeepCopy(obj[attr]);
                }
            }
            return copy;
        }
        throw new Error('Unable to copy obj! Its type is not supported.');
    }
}

class ObjectPathHelper {
    static get(model, path) {
        if (!path.includes('.')) {
            return model[path];
        }
        else {
            return this.getNode(model, path);
        }
    }
    static set(model, path, value) {
        if (!path.includes('.')) {
            model[path] = value;
        }
        else {
            let prop = this.getNode(model, path);
            prop = value;
        }
    }
    static getNode(model, path) {
        const pathNodes = path.split('.');
        let pointer = model;
        pathNodes.forEach(nodeName => {
            pointer = pointer[nodeName];
        });
        return pointer;
    }
}

class ModelsModule {
}
ModelsModule.ɵmod = ɵɵdefineNgModule({ type: ModelsModule });
ModelsModule.ɵinj = ɵɵdefineInjector({ factory: function ModelsModule_Factory(t) { return new (t || ModelsModule)(); }, imports: [[]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ModelsModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [],
            }]
    }], null, null); })();

/*
 * Public API Surface of models
 */

/**
 * Generated bundle index. Do not edit.
 */

export { APILocation, Action, ActionRequestModel, ActionResultModel, AppSettings, AppSettingsValue, AuthUserResponse, BaseDataSource, BaseEntity, BaseInput, BasicUser, CacheEntry, ColumnModel, DataSourceRequest, DeepCloneHelper, DialogOptions, DocumentDBDataSource, ErrorModel, FileAttach, GridViewDetail, InputAutoCompete, InputBuilderDefinition, InputDetail, InputDetailDateTime, InputDetailDropdown, InputDetailFile, InputDetailReferenceValues, InputDetailSlider, InputDetailTextArea, InputDetailTextBox, InputDetailToggleButton, InputDynamic, InputTypes, Message, ModelsModule, MongoDBDataSource, MySqlDataSource, NotifcationDetails, NotifcationSubscriber, NotificationSentMessage, ObjectPathHelper, ParameterTypes, PreferenceTypes, ReferenceValue, ReferenceValueItem, RestApiDataSource, Role, SetPasswordModel, SqlDataSource, UserPreferenceDefinition, UserPreferenceValue, ZuluDateHelper, createBasicUser, createReferenceValue };
//# sourceMappingURL=ngscaffolding-models.js.map
